{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","console","log","updatedItems","filteredItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAIqBA,E,iLACX,IAAD,EAE4CC,KAAKC,MAAjDC,EAFA,EAEAA,KAAKC,EAFL,EAEKA,aAAeC,EAFpB,EAEoBA,aAAaC,EAFjC,EAEiCA,SAExC,OACE,yBAAKC,UAAU,uBACf,0BAAMC,SAAUH,GACf,yBAAKE,UAAU,eACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0CACf,uBAAGA,UAAU,kBAEb,2BAAOE,KAAK,OACZF,UAAU,eAAeG,YAAY,aACrCC,MAAOR,EAAMS,SAAUR,KAEvB,4BAAQK,KAAK,SACbF,UACCD,EAAW,iCACV,kCAEDA,EAAW,YAAc,kB,GAtBQO,aCAlBC,E,iLACX,IAAD,EACiCb,KAAKC,MAAtCa,EADA,EACAA,MAAMC,EADN,EACMA,aAAaC,EADnB,EACmBA,WAC1B,OACE,wBAAIV,UAAU,uEACd,gCAAMQ,GACN,yBAAKR,UAAU,aACf,0BAAMA,UAAU,oBAAoBW,QAASD,GAA7C,QAEA,0BAAMV,UAAU,mBAAmBW,QAASF,GAA5C,gB,GATkCH,aCAjBM,E,iLAGX,IAAD,EAC2ClB,KAAKC,MAAhDkB,EADA,EACAA,MAAMC,EADN,EACMA,UAAUL,EADhB,EACgBA,aAAaC,EAD7B,EAC6BA,WAEpC,OACE,wBAAIV,UAAU,mBACd,wBAAIA,UAAU,+BAAd,aAGCa,EAAME,KAAI,SAAAnB,GACT,OACA,kBAAC,EAAD,CAAUoB,IAAKpB,EAAKqB,GACpBT,MAAOZ,EAAKY,MACZC,aAAc,kBAAKA,EAAab,EAAKqB,KACrCP,WAAY,kBAAKA,EAAWd,EAAKqB,UASnC,4BAAQf,KAAK,SAASF,UAAU,iDAGhCW,QAASG,GAHT,kB,GAzBkCR,a,wBCiGvBY,G,iNA3FdC,MAAM,CAELN,MAAM,GACNI,GAAGG,MACHxB,KAAK,GACLG,UAAS,G,EAEVF,aAAe,SAAAwB,GACd,EAAKC,SAAS,CACb1B,KAAKyB,EAAEE,OAAOnB,S,EAIfN,aAAe,SAAAuB,GACbA,EAAEG,iBAEF,IAAMC,EAAS,CACdR,GAAG,EAAKE,MAAMF,GACdT,MAAM,EAAKW,MAAMvB,MAElB8B,QAAQC,IAAIF,GAEZ,IAAMG,EAAY,sBAAO,EAAKT,MAAMN,OAAlB,CAAwBY,IAC1C,EAAKH,SAAS,CAEbT,MAAMe,EACNhC,KAAK,GACLqB,GAAGG,MACHrB,UAAS,K,EAOZe,UAAY,WACX,EAAKQ,SAAU,CACdT,MAAM,M,EAIRJ,aAAe,SAACQ,GAEf,IAAMY,EAAgB,EAAKV,MAAMN,MAAMiB,QAAO,SAAAlC,GAAI,OAAIA,EAAKqB,KAAMA,KAEjE,EAAKK,SAAU,CACdT,MAAMgB,K,EAIRnB,WAAa,SAAAO,GACZ,IAAMY,EAAgB,EAAKV,MAAMN,MAAMiB,QAAO,SAAAlC,GAAI,OAAIA,EAAKqB,KAAMA,KAE3Dc,EAAe,EAAKZ,MAAMN,MAAMmB,MAAK,SAAApC,GAAI,OAAIA,EAAKqB,KAAMA,KAC9DS,QAAQC,IAAII,GAEZ,EAAKT,SAAU,CACdT,MAAMgB,EACNjC,KAAKmC,EAAavB,MAClBT,UAAS,EACTkB,GAAGA,K,wEAKL,OACA,yBAAKjB,UAAU,aACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,gCACd,wBAAIA,UAAU,8BAAd,cACA,kBAAC,EAAD,CAAWJ,KAAMF,KAAKyB,MAAMvB,KAC5BC,aAAcH,KAAKG,aAClBC,aAAcJ,KAAKI,aACnBC,SAAUL,KAAKyB,MAAMpB,WAEtB,kBAAC,EAAD,CAAUc,MAAOnB,KAAKyB,MAAMN,MAC5BC,UAAWpB,KAAKoB,UACfL,aAAcf,KAAKe,aACnBC,WAAYhB,KAAKgB,oB,GAhFHJ,cCIE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93ea2591.chunk.js","sourcesContent":["\nimport React, {Component} from 'react';\n\n\nexport default class TodoInput extends Component{\n\trender(){\n\n\t\tconst {item,handleChange , handleSubmit,editItem} =this.props\n\n\t\treturn(\n\t\t\t\t<div className=\"card card-body my-3\">\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<div className=\"input-group-prepend\">\n\t\t\t\t\t<div className=\"input-group-text bg-primary text-white\">\n\t\t\t\t\t<i className=\"fas fa-book\"></i>\n\t\t\t\t\t</div></div>\n\t\t\t\t\t<input type=\"text\" \n\t\t\t\t\tclassName=\"form-control\" placeholder=\"Add A item\" \n\t\t\t\t\tvalue={item} onChange={handleChange}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\" \n\t\t\t\t\tclassName={\n\t\t\t\t\t\teditItem ? \"btn btn-block btn-success mt-3\"\n\t\t\t\t\t\t:\"btn btn-block btn-primary mt-3\"\n\t\t\t\t\t}>\n\t\t\t\t\t{editItem ? 'Edit Item' : 'Add Item'}</button>\n\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}","\nimport React, {Component} from 'react';\n\n\nexport default class TodoItem extends Component{\n\trender(){\n\t\tconst {title,handleDelete,handleEdit} = this.props\n\t\treturn(\n\t\t\t\t<li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n\t\t\t\t<h6> {title}</h6>\n\t\t\t\t<div className=\"todo-icon\">\n\t\t\t\t<span className=\"mx-2 text-success\" onClick={handleEdit}>\n\t\t\t\tEdit</span>\n\t\t\t\t<span className=\"mx-2 text-danger\" onClick={handleDelete}>\n\t\t\t\tDelete</span>\n\t\t\t\t</div>\n\t\t\t\t</li>\n\t\t\t)\n\t}\n}","\nimport React, {Component} from 'react';\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component{\n\n\n\trender(){\n\t\tconst {items,clearList,handleDelete,handleEdit} = this.props\n\n\t\treturn(\n\t\t\t\t<ul className=\"list-group my-5\">\n\t\t\t\t<h3 className=\"text-capitalize text-center\">ToDo List</h3>\n\n\t\t\t\t{\n\t\t\t\t\titems.map(item => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t<TodoItem key={item.id} \n\t\t\t\t\t\ttitle={item.title}\n\t\t\t\t\t\thandleDelete={()=> handleDelete(item.id)}\n\t\t\t\t\t\thandleEdit={()=> handleEdit(item.id)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\n\n\n\t\t\t\t<button type=\"button\" className=\"btn btn-danger btn-block \n\n\t\t\t\ttext-capitalize mt-5\"\n\t\t\t\tonClick={clearList}>Clear All</button>\n\t\t\t\t</ul>\n\n\t\t\t)\n\t}\n}","import React, {Component} from 'react';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\nimport './App.css';\n\n\nclass App extends Component{\n\n\tstate={\n\n\t\titems:[],\n\t\tid:uuid(),\n\t\titem:'',\n\t\teditItem:false\n\t}\n\thandleChange = e => {\n\t\tthis.setState({\n\t\t\titem:e.target.value\n\t\t});\n\t}\n\n\t handleSubmit = e => {\n\t \t e.preventDefault();\n\n\t \t const newItem ={\n\t \t \tid:this.state.id,\n\t \t \ttitle:this.state.item\n\t \t }\n\t \t console.log(newItem);\n\n\t \t const updatedItems = [...this.state.items,newItem];\n\t \t this.setState({\n\n\t \t \titems:updatedItems,\n\t \t \titem:'',\n\t \t \tid:uuid(),\n\t \t \teditItem:false\n\n\t \t });\n\n\n\t };\n\n\t clearList = () => {\n\t \tthis.setState ({\n\t \t\titems:[]\n\t \t});\n\n\t }\n\t handleDelete = (id) => {\n\n\t \tconst filteredItems = this.state.items.filter(item => item.id !==id)\n\n\t \tthis.setState ({\n\t \t\titems:filteredItems\n\t \t});\n\n\t }\n\t handleEdit = id => {\n\t \tconst filteredItems = this.state.items.filter(item => item.id !==id)\n\n\t \tconst selectedItem = this.state.items.find(item => item.id ===id)\n\t \tconsole.log(selectedItem);\n\n\t \tthis.setState ({\n\t \t\titems:filteredItems,\n\t \t\titem:selectedItem.title,\n\t \t\teditItem:true,\n\t \t\tid:id\n\t \t});\n\t }\n\trender()\n\t{\n\t\treturn (\n\t\t<div className=\"container\">\n\t\t<div className=\"row\">\n\t\t<div className=\"col-10 mx-auto col-md-8 mt-4\">\n\t\t <h1 className=\"tex-capitalize text-center\">To-Do App </h1>\n\t\t <TodoInput item={this.state.item} \n\t\t handleChange={this.handleChange}\n\t\t  handleSubmit={this.handleSubmit} \n\t\t  editItem={this.state.editItem}\n\t\t  />\n\t\t <TodoList items={this.state.items} \n\t\t clearList={this.clearList}\n\t\t  handleDelete={this.handleDelete}\n\t\t  handleEdit={this.handleEdit}\n\t\t  />\n\t\t </div>\n\t\t </div>\n\t\t</div>\n\n\n\t\t\t)\n\n\t\t\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}